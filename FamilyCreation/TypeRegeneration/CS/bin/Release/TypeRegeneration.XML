<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TypeRegeneration</name>
    </assembly>
    <members>
        <member name="T:Revit.SDK.Samples.TypeRegeneration.CS.Command">
            <summary>
            A class inherits IExternalCommand interface.
            this class controls the class which subscribes handle events and the events' information UI.
            like a bridge between them.
            </summary>
        </member>
        <member name="F:Revit.SDK.Samples.TypeRegeneration.CS.Command.m_familyManager">
            <summary>
            store family manager
            </summary>
        </member>
        <member name="F:Revit.SDK.Samples.TypeRegeneration.CS.Command.m_logFileName">
            <summary>
            store the log file name
            </summary>
        </member>
        <member name="M:Revit.SDK.Samples.TypeRegeneration.CS.Command.Execute(Autodesk.Revit.UI.ExternalCommandData,System.String@,Autodesk.Revit.DB.ElementSet)">
            <summary>
            Implement this method as an external command for Revit.
            </summary>
            <param name="commandData">An object that is passed to the external application 
            which contains data related to the command, 
            such as the application object and active view.</param>
            <param name="message">A message that can be set by the external application 
            which will be displayed if a failure or cancellation is returned by 
            the external command.</param>
            <param name="elements">A set of elements to which the external application 
            can add elements that are to be highlighted in case of failure or cancellation.</param>
            <returns>Return the status of the external command. 
            A result of Succeeded means that the API external method functioned as expected. 
            Cancelled can be used to signify that the user cancelled the external operation 
            at some point. Failure should be returned if the application is unable to proceed with 
            the operation.</returns>
        </member>
        <member name="M:Revit.SDK.Samples.TypeRegeneration.CS.Command.CheckTypeRegeneration(Revit.SDK.Samples.TypeRegeneration.CS.MessageForm)">
            <summary>
             After setting CurrentType property, the CurrentType has changed to the new one,the Revit model will change along with the current type
            </summary>
            <param name="msgForm">the form is used to show the regeneration result</param>        
        </member>
        <member name="M:Revit.SDK.Samples.TypeRegeneration.CS.Command.WriteLog(System.String)">
            <summary>
            The method to write line to log file
            </summary>
            <param name="logStr">the log string</param>
        </member>
        <member name="T:Revit.SDK.Samples.TypeRegeneration.CS.MessageForm">
            <summary>
            The form is used to show the result
            </summary>
        </member>
        <member name="F:Revit.SDK.Samples.TypeRegeneration.CS.MessageForm.timer">
            <summary>
            new a Timer,set the interval 2 seconds
            </summary>
        </member>
        <member name="M:Revit.SDK.Samples.TypeRegeneration.CS.MessageForm.#ctor">
            <summary>
            construction of MessageForm
            </summary>
        </member>
        <member name="M:Revit.SDK.Samples.TypeRegeneration.CS.MessageForm.AddMessage(System.String,System.Boolean)">
            <summary>
            add text to the richtextbox and set time enable is true, then timer starts timing
            </summary>
            <param name="message">message from the regeneration</param>
            <param name="enableTimer">enable or disable the timer elapsed event</param>
        </member>
        <member name="M:Revit.SDK.Samples.TypeRegeneration.CS.MessageForm.onTimeOut(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            the method is executed when time is out, and set the timer enabled false,then timer stop timing
            </summary>
            <param name="source"></param>
            <param name="e">time elapsed event args</param>
        </member>
        <member name="F:Revit.SDK.Samples.TypeRegeneration.CS.MessageForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Revit.SDK.Samples.TypeRegeneration.CS.MessageForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Revit.SDK.Samples.TypeRegeneration.CS.MessageForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
    </members>
</doc>
